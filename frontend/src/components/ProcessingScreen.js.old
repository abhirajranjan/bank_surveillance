import React, { useState, useEffect, useRef } from 'react';

function ProcessingScreen({ sessionId, initialBufferSize, videoSrcUrl, onReset }) {
  const [detection, setDetection] = useState({ className: 'N/A', confidence: 0 });
  const [error, setError] = useState('');
  const eventSourceRef = useRef(null);
  const videoRef = useRef(null); // Ref for the video element

  useEffect(() => {
    if (!sessionId) return;

    const detectionUrl = `http://localhost:5001/detections/${sessionId}?buffer_size=${initialBufferSize}`;
    console.log("Connecting to EventSource:", detectionUrl);

    eventSourceRef.current = new EventSource(detectionUrl);

    eventSourceRef.current.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        if (data.error) {
          console.error("Detection stream error:", data.error);
          setError(`Server error: ${data.error}`);
          // Optionally close connection on error
          // eventSourceRef.current.close(); 
        } else if (data.status === 'finished') {
          console.log("Detection stream finished.");
          setDetection(prev => ({ ...prev, className: 'Finished' }));
          eventSourceRef.current.close();
        } else {
          // console.log("Received detection:", data);
          setDetection({
            className: data.class_name,
            confidence: data.confidence * 100, // Convert to percentage
          });
          setError(''); // Clear previous errors
        }
      } catch (e) {
        console.error("Failed to parse detection data:", event.data, e);
        setError('Failed to parse detection data.');
      }
    };

    eventSourceRef.current.onerror = (err) => {
      console.error("EventSource failed:", err);
      setError('Connection to detection server lost.');
      setDetection({ className: 'Error', confidence: 0 });
      eventSourceRef.current.close();
    };

    return () => {
      if (eventSourceRef.current) {
        console.log("Closing EventSource");
        eventSourceRef.current.close();
      }
    };
  }, [sessionId, initialBufferSize]);


  const getBoxColor = (confidence) => {
    if (confidence > 90) return 'border-red-500 bg-red-500 bg-opacity-20';
    if (confidence > 60) return 'border-yellow-500 bg-yellow-500 bg-opacity-20';
    return 'border-gray-600';
  };

  const confidence = parseFloat(detection.confidence);

  return (
    <div className="min-h-screen flex flex-col items-center justify-start bg-gray-900 p-4 space-y-6">
      <div className="w-full flex justify-between items-center px-4 pt-4">
        <h1 className="text-2xl font-bold text-teal-400">
          Bank Surveillance - Live Analysis
        </h1>
        <button
          onClick={onReset}
          className="bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
        >
          Reset
        </button>
      </div>

      {error && <p className="text-red-400 bg-red-900 p-3 rounded-md w-full max-w-4xl text-center">{error}</p>}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 w-full max-w-6xl h-[70vh]">
        {/* Video Feed Part */}
        <div className="md:col-span-2 bg-black rounded-lg shadow-xl overflow-hidden flex justify-center items-center">
          {videoSrcUrl ? (
             <video
                ref={videoRef}
                src={videoSrcUrl} // Direct URL to the video file served by Flask
                controls
                autoPlay
                muted // Autoplay often requires muted
                className="w-full h-full object-contain" // or object-cover
                onError={(e) => setError("Failed to load video. Ensure it's a supported format.")}
             >
                Your browser does not support the video tag.
             </video>
          ) : (
            <p className="text-gray-400">Loading video...</p>
          )}
        </div>

        {/* Detection Part */}
        <div className={`flex flex-col justify-center items-center p-6 bg-gray-800 rounded-lg shadow-xl border-2 ${getBoxColor(confidence)}`}>
          <h2 className="text-xl font-semibold text-gray-300 mb-2">Current Detection</h2>
          <p className="text-4xl font-bold text-teal-400 mb-1 truncate max-w-full px-2" title={detection.className}>
            {detection.className}
          </p>
          <p className="text-lg text-gray-400 mb-4">
            Confidence: {confidence.toFixed(2)}%
          </p>
          <div className="w-full bg-gray-700 rounded-full h-6 mb-1 overflow-hidden">
            <div
              className={`h-6 rounded-full transition-all duration-300 ease-out 
                          ${confidence > 90 ? 'bg-red-500' : confidence > 60 ? 'bg-yellow-500' : 'bg-teal-500'}`}
              style={{ width: `${Math.max(0, Math.min(100, confidence))}%` }} // Ensure width is between 0 and 100
            ></div>
          </div>
           {/* Small legend for colors */}
           <div className="text-xs text-gray-500 mt-3 space-y-1">
             <p><span className="inline-block w-3 h-3 bg-teal-500 mr-1 rounded-sm"></span> Normal / Low (<=60%)</p>
             <p><span className="inline-block w-3 h-3 bg-yellow-500 mr-1 rounded-sm"></span> Medium (>60%)</p>
             <p><span className="inline-block w-3 h-3 bg-red-500 mr-1 rounded-sm"></span> High (>90%)</p>
           </div>
        </div>
      </div>
    </div>
  );
}

export default ProcessingScreen;